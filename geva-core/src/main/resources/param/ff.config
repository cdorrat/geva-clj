#
# @author eliott bartley
# @update 2008.July.18
#  parsed in UI.GEVAPropertiesGUI.initialiseFFConfig
#
# Fitness function configuration
#
#  This file contains  sections where each  section has a different  format and
#   purpose. Sections are defined by  starting a line with a hypen (-) followed
#   by the  name of the  section and all  lines following this,  up to the next
#   section, or end of file, are taken as  the body of that section. All white-
#   space (except for new-lines)  is ignored around fields  and can be used for
#   layout
#
#  Sections
#
#   -class   This section defines which fitness function classes will appear in
#             the GUI, each line following this section name have the following
#             format..
#
#    fitness,grammar,name1,name2,..,nameN
#
#    fitness Specifies the  fully qualified  Java name of the  fitness function
#    grammar Specifies the name of the grammar file that is selected by default
#             when the user picks the related  fitness function. This name must
#             include the filename extension
#    name*.. All following comma  separated values are a  named relationship to
#             the other  sections  that follow.  i.e.  for each name  specified
#             here,  it is saying that in the following  sections' lines, which
#             begin  with  a  name,  that  that line  relates to  this  fitness
#             function. Names are unique to a section, so if xyz appeared under
#             -jar and under -cmd, specifying one name here as xyz will link to
#             both the -jar entry and the -cmd entry
#
#            ~~~
#
#   -jar     This  section  defines  the  jar  files  that  are  needed  for  a
#             particular fitness  function and link to the  fitness function by
#             name.  The first field  in the jar  section is name  and links to
#             the last  fields in the  class section.  Each line following this
#             section have the following format..
#
#    name,jar1,jar2,..,jarN
#
#    name    The name of this  jar entry so  it can be linked  with the fitness
#             function
#    jar*..  Filepath to the jar files. This can be a fully qualified name to a
#             single jar,  or can  be a  wildcard to  several jars.  When using
#             wildcards,  regular expression syntax is used.  Note: the regular
#             expression  must match  entire words,  i.e. 'abc'  will not match
#             against the filename 'xabcy'.  Wildcards can  also be used in the
#             pathname, so  c:/.*jar.*/abc.jar  will  match abc.jar  in folders
#             that have 'jar'  in their name and are in the  c:/ directory.  To
#             recrusively search directories, the directory name can begin with
#             an 'N:' where N specifies how deep to search, e.g. c:/5:jar/x.jar
#             will go to a  maximum of 5  directories  below c:/  looking for a
#             directory  called jar,  and then within that,  the x.jar file. To
#             recursively search  an entire directory,  use '*:'. Note: because
#             '\' has meaning in  regular expression syntax,  it cannot be used
#             as  a  path  separator,  '/' must  always  be  used  to  separate
#             directory  names.  Note2:  try to  keep  the amount  of recursive
#             searching to a  minimum as the GUI must  perform the search every
#             time it starts up,  and although it performs this  search quietly
#             in the background,  when the user runs the  fitness function that
#             needs those jars,  the running will be delayed until all jars are
#             found
#
#            ~~~
#
#   -cmd     This section defines additional  arguments that are passed to GEVA
#             when it is  executed  for the  related fitness  functions and the
#             lines following it have the following format..
#
#    name,args
#
#    name    The name of this  cmd entry so  it can be linked  with the fitness
#             function
#    args    A string that is injected into the command used to execute GEVA
#

-class
 FitnessEvaluation.ClojureFitnessEvaluation,letter_grammar.bnf,clojure
 FitnessEvaluation.PatternMatch.WordMatch,HelloWorld_grammar.bnf
 FitnessEvaluation.LSystem.LSystemInitialiser,LSys_1.bnf
 FitnessEvaluation.Canvas.Paint,paint.bnf
 FitnessEvaluation.ParityProblem.EvenFiveParityFitnessBSF,efp_grammar_gr.bnf
 FitnessEvaluation.SantaFeAntTrail.SantaFeAntTrailBSF,sf_grammar_gr.bnf
 FitnessEvaluation.SantaFeAntTrail.SantaFeAntTrailInterpreter,sf_interpreter.bnf
 FitnessEvaluation.SymbolicRegression.SymbolicRegressionBSF,sr_grammar_gr.bnf
 FitnessEvaluation.SymbolicRegression.SymbolicRegressionJScheme,sr_grammar_sch.bnf
 FitnessEvaluation.Binomial,lawnmower.bnf
 FitnessEvaluation.MaxProblem.MaxProblemInterpreter,max_grammar.bnf
 FitnessEvaluation.RoyalTree.RoyalTree,royal_tree.bnf
 FitnessEvaluation.Sudoku.SudokuFit,sudokuEasy0_grammar.bnf
-jar
 clojure,../GEVA/lib/clojure/.*\.jar
 scheme,../GEVA/lib/jscheme/.*\.jar
-cmd
