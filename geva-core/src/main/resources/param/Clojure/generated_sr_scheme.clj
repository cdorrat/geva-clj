(ns scheme-test)

(def square (fn [x] (* x x)))
(def d (fn [t n] (if (= n 0) 0.0 (/ t n))))
(def inputs0 '(0.8614242668368997 -0.9379068050041595 0.14374883501635427 0.31204738756728023 -0.6191969471146461 -0.8782001144105982 -0.21258616245912343 -0.3809323621807512 0.610497390317746 0.5093615802146572 -0.9434565428291319 0.8951363097354856 0.5864917864449 -0.15490975361065806 -0.44481121383541855 0.9379338702564017 -0.7711935846733433 0.9489144204726805 -0.26697214207055775 -0.7174914998993926))
(def aim (fn [x0](+ (+ (+ (+ x0 (* x0 x0)) (* x0 (* x0 x0))) (* (* x0 x0) (* x0 x0))) (* (* x0 x0) (* x0 (* x0 x0))))) )
(def guess (fn [x0] ( + 1.0 1.0 ) ) )

(defn run [aim_x guess_x] 
  (do ((i 0 (+ 1 i)) (diff 0) ) 
      ((= i 20.0) diff)
      (set! diff 
	    (+ diff 
	       (square (abs (- (aim_x (list-ref inputs0 i)) (guess_x (list-ref inputs0 i))))))))) 

(defn run [aim_x guess_x] 
  (map + (map #(square (Math/abs (- (aim_x %) (guess_x %)))) inputs

(run aim guess)